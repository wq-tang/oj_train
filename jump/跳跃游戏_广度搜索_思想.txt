给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。




方法1：事实上，这个问题我们可以看作是一个图搜索问题，用广度搜索，找出最浅的就好。因为在我思考这个问题的时候我发现每个数可以跳跃好几个数就相当于图的连接，
最后发现还是个有向图.但是弊端是复杂度是o(n^2)




方法2：利用贪心算法+动态规划来解决，思想是找到走一步最多能走多远，然后找第二步最多能走多远，第三部最多能走多远这样的思想来解决的，
然后计算一下就OK了，python代码很简洁，其中第一位要做特殊处理。时间复杂度o(n)